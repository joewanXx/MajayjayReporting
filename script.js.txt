// Extracted script.js
(function(){
// --- Mock Authentication Data and State ---
        let mockUser = null; // Represents the currently logged-in user object
        
        // Mock database for sign-up/login simulation
        const mockUserDB = {
            "admin@brgyportal.io": { uid: "admin-uid-12345", username: "admin", password: "password", role: "admin" },
            "user@brgyportal.io": { uid: "user-uid-67890", username: "user", password: "password", role: "resident" }
        };

        // Mock Reports Data (Centralized State)
        let mockReports = [
            { id: 'R-1702588800000-1', reporter: 'Anonymous', title: 'Illegal Dumping Site', category: 'sanitation', location: 'Back alley behind the basketball court', description: 'Large piles of household trash and debris have accumulated over the past week.', status: 'New', date: '2025-10-13', response: null, proof: null },
            { id: 'R-1702588800000-2', reporter: 'Juan Dela Cruz', title: 'Damaged Road Surface', category: 'infrastructure', location: 'Mid-section of Sampaguita Street', description: 'A deep pothole has formed, causing traffic issues and hazard to cyclists.', status: 'In Progress', date: '2025-10-12', response: 'Inspection complete. Work crew scheduled for repair on 10/18.', proof: 'RoadRepairPlan.pdf' },
            { id: 'R-1702588800000-3', reporter: 'Maria Santos', title: 'Loud Construction Noise', category: 'noise', location: 'Near Brgy. Hall construction site', description: 'Noise levels exceed permitted hours, especially early in the morning (6 AM).', status: 'Resolved', date: '2025-10-10', response: 'Contractor warned and hours adjusted. Issue closed.', proof: 'ResolvedSitePhoto.jpg' },
            { id: 'R-1702588800000-4', reporter: 'Mark D.', title: 'Broken Water Pipe', category: 'infrastructure', location: 'In front of 123 P. Gomez Street', description: 'Water is leaking severely, causing flooding on the street. Needs urgent attention.', status: 'New', date: '2025-10-14', response: null, proof: null },
        ];


        // --- Utility Functions ---
        
        function formatUsernameAsEmail(username) {
            return `${username.toLowerCase().trim()}@brgyportal.io`;
        }

        function getDisplayUsername(email) {
            if (!email) return 'N/A';
            return email.split('@')[0];
        }

        function generateReportId() {
            // Using a more unique ID format to avoid collisions
            return `R-${Date.now()}-${Math.floor(Math.random() * 1000000).toString().padStart(6, '0')}`;
        }

        function setButtonLoading(buttonId, isLoading, text = 'Loading...') {
            const button = document.getElementById(buttonId);
            if (!button) return;

            if (isLoading) {
                button.disabled = true;
                button.innerHTML = `<div class="loading-spinner"></div> ${text}`;
            } else {
                button.disabled = false;
                if (buttonId === 'login-button') {
                    button.innerHTML = 'Log In';
                } else if (buttonId === 'signup-button') {
                    button.innerHTML = 'Sign Up';
                }
            }
        }
        
        function showToast(message, type = 'info') {
            const container = document.getElementById('toast-container');
            const toast = document.createElement('div');
            
            const colors = {
                success: 'bg-green-600',
                error: 'bg-red-600',
                info: 'bg-blue-600',
                warning: 'bg-yellow-500'
            };
            const icons = {
                success: 'fa-check-circle',
                error: 'fa-times-circle',
                info: 'fa-info-circle',
                warning: 'fa-exclamation-triangle'
            }

            toast.innerHTML = `<i class="fas ${icons[type]} mr-2"></i> ${message}`;
            toast.className = `p-4 rounded-xl shadow-2xl text-white font-semibold z-50 ${colors[type]} transition-all duration-300 transform translate-x-full opacity-0 flex items-center`;
            container.appendChild(toast);
            
            setTimeout(() => {
                toast.classList.remove('translate-x-full', 'opacity-0');
            }, 10);

            setTimeout(() => {
                toast.classList.add('translate-x-full', 'opacity-0');
                setTimeout(() => toast.remove(), 300);
            }, 4000); 
        }

        window.closeModal = function(modalId) {
            const modal = document.getElementById(modalId);
            if(modal) {
                modal.classList.add('hidden');
                modal.classList.remove('flex');
            }
        }
        
        // --- Page Navigation ---
        function navigate(pageId) {
            document.querySelectorAll('.page').forEach(page => {
                page.classList.remove('active');
            });
            const targetPage = document.getElementById(`${pageId}-page`);
            if (targetPage) {
                targetPage.classList.add('active');
                window.scrollTo(0, 0); // Scroll to top on page change
            }

            // Additional logic for specific pages
            if(pageId === 'admin-dashboard' && mockUser?.role === 'admin') {
                renderAdminReports();
                updateAdminDashboardMetrics();
            }
            if(pageId === 'view-reports') {
                renderPublicReports();
            }
            if(pageId === 'auth') {
                updateAuthPage();
            }
        }


        // --- Core Application Logic & UI Updates ---

        function updateUI() {
            updateHeaderNav();
            updateHomeCards();
            updateAuthPage();
        }

        function updateHeaderNav() {
            const authButton = document.getElementById('auth-button');
            const loggedInStatus = document.getElementById('logged-in-status');
            const navAdminLink = document.getElementById('nav-admin-link');
            const navSubmitReportLink = document.getElementById('nav-submit-report-link'); 
            
            if (mockUser) {
                const username = getDisplayUsername(mockUser.email);
                const role = mockUser.role === 'admin' ? 'Administrator' : 'Resident';

                // Update Header Status
                document.getElementById('header-username').textContent = username;
                document.getElementById('header-role').textContent = role;
                loggedInStatus.classList.remove('hidden');

                // Update Auth Button to Logout
                authButton.setAttribute('onclick', 'handleLogout()');
                authButton.innerHTML = `<i class="fas fa-sign-out-alt mr-2"></i> Log Out`;
                authButton.classList.replace('bg-white', 'bg-red-500');
                authButton.classList.replace('text-blue-600', 'text-white');
                authButton.classList.add('hover:bg-red-600');
                authButton.classList.remove('hover:bg-gray-100');

                // Toggle Admin Dashboard link and Report link visibility
                if (mockUser.role === 'admin') {
                    navAdminLink.classList.remove('hidden');
                    navSubmitReportLink.classList.add('hidden');
                } else {
                    navAdminLink.classList.add('hidden');
                    navSubmitReportLink.classList.remove('hidden');
                }

            } else {
                // Not logged in
                loggedInStatus.classList.add('hidden');
                
                // FIX: Corrected function call from Maps to navigate
                authButton.setAttribute('onclick', `Maps('auth')`);
                authButton.innerHTML = `<i class="fas fa-sign-in-alt mr-2"></i> Log In`;
                authButton.classList.replace('bg-red-500', 'bg-white');
                authButton.classList.replace('text-white', 'text-blue-600');
                authButton.classList.remove('hover:bg-red-600');
                authButton.classList.add('hover:bg-gray-100');
                
                navAdminLink.classList.add('hidden');
                navSubmitReportLink.classList.remove('hidden');
            }
        }

        function updateHomeCards() {
            const isAdmin = mockUser && mockUser.role === 'admin';
            const submitCard = document.getElementById('home-card-submit');
            const cardsContainer = document.getElementById('home-cards-container');

            if (submitCard) {
                if (isAdmin) {
                    submitCard.classList.add('hidden');
                    cardsContainer.classList.add('md:grid-cols-2');
                    cardsContainer.classList.remove('md:grid-cols-3');
                } else {
                    submitCard.classList.remove('hidden');
                    cardsContainer.classList.remove('md:grid-cols-2');
                    cardsContainer.classList.add('md:grid-cols-3');
                }
            }
        }

        function updateAuthPage() {
            const authStatusDiv = document.getElementById('auth-status');
            const authForms = ['login-form', 'signup-form', 'auth-tabs'];

            if (mockUser) {
                document.getElementById('user-email').textContent = mockUser.email;
                document.getElementById('user-id-display').textContent = mockUser.uid;
                authStatusDiv.classList.remove('hidden');
                authForms.forEach(id => document.getElementById(id).classList.add('hidden'));
            } else {
                authStatusDiv.classList.add('hidden');
                authForms.forEach(id => document.getElementById(id).classList.remove('hidden'));
                showAuthForm('login');
            }
        }

        // --- Authentication Handlers ---
        
        function handleLogin(event) {
            event.preventDefault();
            const email = formatUsernameAsEmail(document.getElementById('login-email').value);
            const password = document.getElementById('login-password').value;
            const errorEl = document.getElementById('login-error');
            
            setButtonLoading('login-button', true);
            errorEl.classList.add('hidden');

            setTimeout(() => {
                const user = mockUserDB[email];
                if (user && user.password === password) {
                    mockUser = { email, uid: user.uid, role: user.role };
                    showToast('Login successful! Welcome back.', 'success');
                    updateUI();
                    if(user.role === 'admin') {
                        navigate('admin-dashboard');
                    } else {
                        navigate('home');
                    }
                } else {
                    errorEl.textContent = 'Invalid username or password.';
                    errorEl.classList.remove('hidden');
                    showToast('Login failed. Please check your credentials.', 'error');
                }
                setButtonLoading('login-button', false);
            }, 1000);
        }

        function handleSignUp(event) {
            event.preventDefault();
            const username = document.getElementById('signup-email').value;
            const password = document.getElementById('signup-password').value;
            const confirmPassword = document.getElementById('signup-confirm-password').value;
            const email = formatUsernameAsEmail(username);
            const errorEl = document.getElementById('signup-error');

            errorEl.classList.add('hidden');
            
            if (password !== confirmPassword) {
                errorEl.textContent = 'Passwords do not match.';
                errorEl.classList.remove('hidden');
                return;
            }

            if (mockUserDB[email]) {
                errorEl.textContent = 'This username is already taken.';
                errorEl.classList.remove('hidden');
                return;
            }

            setButtonLoading('signup-button', true, 'Creating Account...');

            setTimeout(() => {
                const newUser = {
                    uid: `user-uid-${Date.now()}`,
                    username,
                    password,
                    role: 'resident'
                };
                mockUserDB[email] = newUser;
                
                showToast('Account created successfully! Please log in.', 'success');
                // Switch to login form
                document.getElementById('login-email').value = username;
                document.getElementById('login-password').value = '';
                showAuthForm('login');
                setButtonLoading('signup-button', false);
            }, 1500);
        }

        function handleLogout() {
            mockUser = null;
            showToast('You have been logged out.', 'info');
            updateUI();
            navigate('home');
        }

        function showAuthForm(formType) {
            const loginForm = document.getElementById('login-form');
            const signupForm = document.getElementById('signup-form');
            const loginTab = document.getElementById('login-tab');
            const signupTab = document.getElementById('signup-tab');

            if (formType === 'login') {
                loginForm.classList.remove('hidden');
                signupForm.classList.add('hidden');
                loginTab.classList.add('border-green-600', 'text-green-600', 'bg-green-50');
                loginTab.classList.remove('border-gray-300', 'text-gray-500');
                signupTab.classList.add('border-gray-300', 'text-gray-500');
                signupTab.classList.remove('border-green-600', 'text-green-600', 'bg-green-50');
            } else {
                loginForm.classList.add('hidden');
                signupForm.classList.remove('hidden');
                signupTab.classList.add('border-green-600', 'text-green-600', 'bg-green-50');
                signupTab.classList.remove('border-gray-300', 'text-gray-500');
                loginTab.classList.add('border-gray-300', 'text-gray-500');
                loginTab.classList.remove('border-green-600', 'text-green-600', 'bg-green-50');
            }
        }

        // --- Report Handling ---

        function handleReportSubmission(event) {
            event.preventDefault();
            const newReport = {
                id: generateReportId(),
                reporter: document.getElementById('reporter-name').value || 'Anonymous',
                title: document.getElementById('report-title').value,
                category: document.getElementById('issue-category').value,
                location: document.getElementById('report-location').value,
                description: document.getElementById('report-description').value,
                status: 'New',
                date: new Date().toISOString().split('T')[0],
                response: null,
                proof: null
            };
            mockReports.unshift(newReport); // Add to the top of the list
            
            showToast('Report submitted successfully!', 'success');
            document.getElementById('report-form').reset();
            navigate('view-reports');
        }

        function getStatusBadge(status) {
            const baseClasses = 'px-3 py-1 text-xs font-bold rounded-full';
            switch (status) {
                case 'New': return `<span class="${baseClasses} bg-yellow-100 text-yellow-800">New</span>`;
                case 'In Progress': return `<span class="${baseClasses} bg-blue-100 text-blue-800">In Progress</span>`;
                case 'Resolved': return `<span class="${baseClasses} bg-green-100 text-green-800">Resolved</span>`;
                default: return `<span class="${baseClasses} bg-gray-100 text-gray-800">${status}</span>`;
            }
        }

        function renderPublicReports() {
            const container = document.getElementById('public-reports-list');
            if (!container) return;
            container.innerHTML = '';
            
            if (mockReports.length === 0) {
                container.innerHTML = '<p class="text-center text-gray-500">No public reports have been filed yet.</p>';
                return;
            }

            mockReports.forEach(report => {
                const reportCard = `
                    <div class="bg-white p-5 rounded-lg shadow-md border-l-4 border-blue-500">
                        <div class="flex justify-between items-start">
                            <div>
                                <h4 class="text-lg font-bold text-gray-800">${report.title}</h4>
                                <p class="text-sm text-gray-500">Reported on ${report.date} at ${report.location}</p>
                            </div>
                            ${getStatusBadge(report.status)}
                        </div>
                        <div class="mt-3 pt-3 border-t">
                            <p class="text-sm text-gray-700">${report.description}</p>
                            ${report.response ? `<div class="mt-3 p-3 bg-green-50 border-l-4 border-green-300 rounded-r-lg">
                                <p class="font-semibold text-sm text-green-800">Official Response:</p>
                                <p class="text-sm text-green-700 italic">"${report.response}"</p>
                            </div>` : ''}
                        </div>
                    </div>
                `;
                container.innerHTML += reportCard;
            });
        }
        
        function renderAdminReports() {
            const container = document.getElementById('admin-reports-container'); // This is the tbody
            const emptyState = document.getElementById('admin-reports-empty');
            if (!container || !emptyState) return;

            container.innerHTML = '';

            if (mockReports.length === 0) {
                emptyState.classList.remove('hidden');
                container.parentElement.parentElement.classList.add('hidden'); // Hide table wrapper
            } else {
                emptyState.classList.add('hidden');
                container.parentElement.parentElement.classList.remove('hidden'); // Show table wrapper

                mockReports.forEach(report => {
                    const reportRow = `
                        <tr class="bg-white border-b hover:bg-gray-50">
                            <td class="px-6 py-4">
                                <p class="font-bold text-gray-800">${report.title}</p>
                                <p class="text-xs text-gray-500 font-mono">${report.id}</p>
                            </td>
                            <td class="px-6 py-4">
                                ${report.location}
                            </td>
                            <td class="px-6 py-4">
                                ${report.date}
                            </td>
                            <td class="px-6 py-4">
                                ${getStatusBadge(report.status)}
                            </td>
                            <td class="px-6 py-4 text-center">
                                <button onclick="openAdminModal('${report.id}')" class="bg-yellow-500 text-white px-3 py-2 rounded-lg font-bold hover:bg-yellow-600 text-xs shadow-sm transition">
                                    <i class="fas fa-edit mr-1"></i> Manage
                                </button>
                            </td>
                        </tr>
                    `;
                    container.innerHTML += reportRow;
                });
            }
        }


        function openAdminModal(reportId) {
            const report = mockReports.find(r => r.id === reportId);
            if (!report) return;

            // Populate modal fields
            document.getElementById('modal-report-title').textContent = report.title;
            document.getElementById('modal-report-id').textContent = report.id;
            document.getElementById('modal-report-reporter').textContent = report.reporter;
            document.getElementById('modal-report-location').textContent = report.location;
            document.getElementById('modal-report-description').textContent = report.description;
            document.getElementById('modal-current-report-id').value = report.id;
            document.getElementById('admin-status').value = report.status;
            document.getElementById('admin-response').value = report.response || '';
            document.getElementById('modal-previous-response').textContent = report.response || 'None';
            document.getElementById('modal-current-proof').textContent = report.proof || 'None';

            // Show modal
            const modal = document.getElementById('report-detail-modal');
            modal.classList.remove('hidden');
            modal.classList.add('flex');
        }

        function handleAdminAction(event) {
            event.preventDefault();
            const reportId = document.getElementById('modal-current-report-id').value;
            const newStatus = document.getElementById('admin-status').value;
            const newResponse = document.getElementById('admin-response').value;
            const newProofFile = document.getElementById('admin-photo-proof').files[0];

            const reportIndex = mockReports.findIndex(r => r.id === reportId);
            if (reportIndex > -1) {
                mockReports[reportIndex].status = newStatus;
                mockReports[reportIndex].response = newResponse;
                if (newProofFile) {
                    mockReports[reportIndex].proof = newProofFile.name; // Simulate file upload
                }
            }

            showToast('Report updated successfully!', 'success');
            closeModal('report-detail-modal');
            renderAdminReports();
            updateAdminDashboardMetrics();
        }

        function updateAdminDashboardMetrics() {
            const pendingCount = mockReports.filter(r => r.status === 'New' || r.status === 'In Progress').length;
            const resolvedCount = mockReports.filter(r => r.status === 'Resolved').length;
            const userCount = Object.keys(mockUserDB).length;

            document.getElementById('pending-count').textContent = pendingCount;
            document.getElementById('resolved-count').textContent = resolvedCount;
            document.getElementById('user-count').textContent = userCount;
        }


        // --- App Initialization ---
        document.addEventListener('DOMContentLoaded', () => {
            updateUI();
            renderPublicReports(); // Initial render for default view
        });
})();
